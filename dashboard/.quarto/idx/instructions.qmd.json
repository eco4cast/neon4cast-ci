{"title":"How to forecast","markdown":{"yaml":{"title":"How to forecast","number-sections":true,"editor":{"markdown":{"wrap":"sentence"}}},"headingText":"tl;dr: How to submit a forecast","containsRefs":false,"markdown":"\n\n\nWe provide an overview of the steps for submitting with the details below:\n\n1)  Register at <https://forms.gle/kg2Vkpho9BoMXSy57>. You are not required to register if your forecast submission uses the word \"example\" in your model_id\". Any forecasts with \"example\" in the model_id will not be used in analyses.\n2)  Generate forecast with required columns.\n3)  Write the forecast to a file that follows the standardized naming format.\n4)  Submit forecast using a provided function.\n5)  Watch forecast be evaluated as new data is collected. \n\n## Generating a forecast\n\n### Any approach is allowed\n\nYou can use any approach to make a prediction about the future conditions at any of the sites and variables\n\n### Must include uncertainty\n\nForecasts require you to make a access of confidence in the prediction of the future.  You can represent your confidence (i.e., uncertainty in forecast) using a distribution or numerically using an ensemble (or sample) of predictions. \n\n### Any model drivers/covariates/features are welcome\n\nYou can use any data as inputs.  This includes all the targets data available to date.  All sensor-based target data is available in near-real time (1 day latency).  You may want to use the updated target data to re-train a model or use in data assimilation.\n\nAs this is a genuine forecasting challenge, you will need forecasted drivers if your model uses drivers as inputs.  If you are interested in using forecasted meteorology, we have developed an R package ([https://github.com/FLARE-forecast/RopenMeteo](https://github.com/FLARE-forecast/RopenMeteo)) that can be used to access ensemble weather forecasts or seasonal forecasts for the sites.  The R package is a wrapper around the open-meteo.com API.  The README in the R package repo provides instructions for use.\n\n### Forecasts can be for a range of horizons\n\nForecasts can be submitted at the daily time step 1 day to 10 years ahead\n\n### Forecasts can be submitted everyday\n\nSince forecasts can be submitted everyday, automation is important.  We provide an example GitHub repository that can be used to automate your forecast with GitHub Actions.  It also includes the use of a custom Docker Container [eco4cast/rocker-neon4cast:latest](https://github.com/LTREB-reservoirs/vera4cast/blob/main/Dockerfile) that has many of the packages and functions needed to generate and submit forecasts. \n\n## Forecast file format\n\nThe file is a csv format with the following columns:\n\n-   `project_id`: use `neon4cast`\n\n-   `model_id`: the short name of the model defined as the model_id in the file name (see below) and in your registration.\n    The model_id should have no spaces.\n    model_id should reflect a method to forecast one or a set of target variables and must be unique to the vera4cast Challenge\n\n-   `datetime`: forecast timestamp.\n    Format `%Y-%m-%d %H:%M:%S` with UTC as the time zone.\n    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.\n\n-   `reference_datetime`: The start of the forecast; this should be 0 times steps in the future.\n    There should only be one value of `reference_datetime` in the file.\n    Format is `%Y-%m-%d %H:%M:%S` with UTC as the time zone.\n    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.\n\n-   `duration`: the time-step of the forecast.\n    Use the value of `P1D` for a daily forecast, `P1W` for a weekly forecast, and `PT30M` for 30 minute forecast.\n    This value should match the duration of the target variable that you are forecasting.\n    Formatted as [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)\n\n-   `site_id`: code for site (`bvre`, `fcre`, or `tubr`)\n\n-   `family` name of the probability distribution that is described by the parameter values in the parameter column (see list below for accepted distribution).\n    An ensemble forecast as a family of `ensemble`.\n    See note below about family\n\n-   `parameter` the parameters for the distribution (see note below about parameter column) or the number of the ensemble member.\n    For example the parameters for normal are `mu` and `sigma`.\n\n-   `variable`: standardized variable name\n\n-   `prediction`: forecasted value for the parameter in the parameter column\n\n## Representing uncertainity \n\nUncertainty is represented through the family - parameter columns\n\n#### Parameteric forecast\n\nFor a parametric forecast with the normal distribution, the `family` column uses the word `normal` to designate a normal distribution and the parameter column must have values of `mu` and `sigma` for each forecasted variable, site_id, depth and time combination.\n\nParameteric forecasts for binary variables should use `bernoulli` as the distribution.\n\nThe following names and parameterization of the distribution are supported (family: parameters):\n\n-   `lognormal`: `mu`, `sigma`\n-   `normal`: `mu`,`sigma`\n-   `bernoulli`: `prob`\n-   `beta`: `shape1`, `shape2`\n-   `uniform`: `min`, `max`\n-   `gamma`: `shape`, `rate`\n-   `logistic`: `location`, `scale`\n-   `exponential`: `rate`\n-   `poisson`: `lambda`\n\nIf you are submitting a forecast that is not in the supported list we recommend using the ensemble format and sampling from your distribution to generate a set of ensemble members that represents your distribution. \n\n#### Ensemble (or sample) forecast\n\nEnsemble (or sample) forecasts use the `family` value of `ensemble` and the `parameter` values are the ensemble index.  \n\nWhen forecasts using the ensemble family are scored, we assume that the ensemble is a set of equally likely realizations that are sampled from a distribution is comparable to that of the observations (i.e., no broad adjustments are required to make the ensemble more consistent with observations). This is referred to as a \"perfect ensemble\" in Br√∂cker and Smith (2007). Ensemble (or sample) forecasts are transformed to a probability distribution function (e.g., dressed) using the default methods in the `scoringRules` R package (empirical version of the quantile decomposition for the `crps` and kernel density estimation using a Gaussian kernel for the `logs`). Kernel density estimation uses the default bandwidth produced by the `bw.nrd` function in the R `stats` package.\n\n### Supported distributions\n\nThe following names and parameterization of the distribution are supported (family: parameters):\n\n-   `lognormal`: `mu`, `sigma`\n-   `normal`: `mu`,`sigma`\n-   `bernoulli`: `prob`\n-   `beta`: `shape1`, `shape2`\n-   `uniform`: `min`, `max`\n-   `gamma`: `shape`, `rate`\n-   `logistic`: `location`, `scale`\n-   `exponential`: `rate`\n-   `poisson`: `lambda`\n\n### Example forecasts\n\nHere is an example of a forecast that uses a normal distribution:\n\n```{r}\ndf <- readr::read_csv(\"https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231345_daily-2023-10-01-climatology.csv.gz\", show_col_types = FALSE)\ndplyr::glimpse(df)\n```\n\nFor an ensemble (or sample) forecast, the `family` column uses the word `ensemble` to designate that it is a ensemble forecast and the parameter column is the ensemble member number (`1`, `2`, `3` ...)\n\n```{r}\ndf <- readr::read_csv(\"https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231348_daily-2023-10-01-persistenceRW.csv.gz\", show_col_types = FALSE)\ndplyr::glimpse(df)\n```\n\n## Submission process\n\nIndividual forecast files can be uploaded any time.\n\nTeams will submit their forecast csv files through an R function.\n\nThe function is available using the following code\n\n```{r eval = FALSE}\nremotes::install_github(\"eco4cast/neon4cast\")\n```\n\nThe submit function is\n\n```{r eval = FALSE}\nlibrary(neon4cast)\nneon4cast::submit(forecast_file = \"your_file.csv\")\n```\n\nIf you will be submitting multiple forecasts using the same model_id, use the following\n\n```{r eval = FALSE}\nneon4cast::submit(forecast_file = \"your_file.csv\",\n                         first_submission = FALSE)\n```\n\n## Post submission\n\n### Processing\n\nAfter submission, our servers will process uploaded files by converting to a parquet format on our public s3 storage. A `pub_datetime` column will be added that denotes when a forecast was submitted.\n\n### Evaluation\n\nAll forecasts are scored daily using new data until the full horizon of the forecast has been scored. Forecasts are scored using the `crps` and `logs` functions in the [`scoringRules`](https://cran.r-project.org/web/packages/scoringRules/index.html) R package. \n\n### Comparsion\n\nForecast performance can be compared to the performance of baseline models.  We are automatically submitting the following baseline models:\n\n- `climatology`: the normal distribution (mean and standard deviation) of that day-of-year in the historical observations\n- `persistenceRW`: a random walk model that assumes no change in the mean behavior.  The random walk is initialized using the most resent observation.\n\nOur [forecast performance](performance.qmd#performance) page includes evaluations of all submitted models.\n\n### Catalog\n\nInformation for accessing the forecasts and scores can be found on our [forecast catalog](catalog.qmd#sec-spatiotemporal-asset-catalog) page. \n","srcMarkdownNoYaml":"\n\n## tl;dr: How to submit a forecast\n\nWe provide an overview of the steps for submitting with the details below:\n\n1)  Register at <https://forms.gle/kg2Vkpho9BoMXSy57>. You are not required to register if your forecast submission uses the word \"example\" in your model_id\". Any forecasts with \"example\" in the model_id will not be used in analyses.\n2)  Generate forecast with required columns.\n3)  Write the forecast to a file that follows the standardized naming format.\n4)  Submit forecast using a provided function.\n5)  Watch forecast be evaluated as new data is collected. \n\n## Generating a forecast\n\n### Any approach is allowed\n\nYou can use any approach to make a prediction about the future conditions at any of the sites and variables\n\n### Must include uncertainty\n\nForecasts require you to make a access of confidence in the prediction of the future.  You can represent your confidence (i.e., uncertainty in forecast) using a distribution or numerically using an ensemble (or sample) of predictions. \n\n### Any model drivers/covariates/features are welcome\n\nYou can use any data as inputs.  This includes all the targets data available to date.  All sensor-based target data is available in near-real time (1 day latency).  You may want to use the updated target data to re-train a model or use in data assimilation.\n\nAs this is a genuine forecasting challenge, you will need forecasted drivers if your model uses drivers as inputs.  If you are interested in using forecasted meteorology, we have developed an R package ([https://github.com/FLARE-forecast/RopenMeteo](https://github.com/FLARE-forecast/RopenMeteo)) that can be used to access ensemble weather forecasts or seasonal forecasts for the sites.  The R package is a wrapper around the open-meteo.com API.  The README in the R package repo provides instructions for use.\n\n### Forecasts can be for a range of horizons\n\nForecasts can be submitted at the daily time step 1 day to 10 years ahead\n\n### Forecasts can be submitted everyday\n\nSince forecasts can be submitted everyday, automation is important.  We provide an example GitHub repository that can be used to automate your forecast with GitHub Actions.  It also includes the use of a custom Docker Container [eco4cast/rocker-neon4cast:latest](https://github.com/LTREB-reservoirs/vera4cast/blob/main/Dockerfile) that has many of the packages and functions needed to generate and submit forecasts. \n\n## Forecast file format\n\nThe file is a csv format with the following columns:\n\n-   `project_id`: use `neon4cast`\n\n-   `model_id`: the short name of the model defined as the model_id in the file name (see below) and in your registration.\n    The model_id should have no spaces.\n    model_id should reflect a method to forecast one or a set of target variables and must be unique to the vera4cast Challenge\n\n-   `datetime`: forecast timestamp.\n    Format `%Y-%m-%d %H:%M:%S` with UTC as the time zone.\n    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.\n\n-   `reference_datetime`: The start of the forecast; this should be 0 times steps in the future.\n    There should only be one value of `reference_datetime` in the file.\n    Format is `%Y-%m-%d %H:%M:%S` with UTC as the time zone.\n    Forecasts submitted with a `%Y-%m-%d` format will be converted to a full datetime assuming UTC mid-night.\n\n-   `duration`: the time-step of the forecast.\n    Use the value of `P1D` for a daily forecast, `P1W` for a weekly forecast, and `PT30M` for 30 minute forecast.\n    This value should match the duration of the target variable that you are forecasting.\n    Formatted as [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)\n\n-   `site_id`: code for site (`bvre`, `fcre`, or `tubr`)\n\n-   `family` name of the probability distribution that is described by the parameter values in the parameter column (see list below for accepted distribution).\n    An ensemble forecast as a family of `ensemble`.\n    See note below about family\n\n-   `parameter` the parameters for the distribution (see note below about parameter column) or the number of the ensemble member.\n    For example the parameters for normal are `mu` and `sigma`.\n\n-   `variable`: standardized variable name\n\n-   `prediction`: forecasted value for the parameter in the parameter column\n\n## Representing uncertainity \n\nUncertainty is represented through the family - parameter columns\n\n#### Parameteric forecast\n\nFor a parametric forecast with the normal distribution, the `family` column uses the word `normal` to designate a normal distribution and the parameter column must have values of `mu` and `sigma` for each forecasted variable, site_id, depth and time combination.\n\nParameteric forecasts for binary variables should use `bernoulli` as the distribution.\n\nThe following names and parameterization of the distribution are supported (family: parameters):\n\n-   `lognormal`: `mu`, `sigma`\n-   `normal`: `mu`,`sigma`\n-   `bernoulli`: `prob`\n-   `beta`: `shape1`, `shape2`\n-   `uniform`: `min`, `max`\n-   `gamma`: `shape`, `rate`\n-   `logistic`: `location`, `scale`\n-   `exponential`: `rate`\n-   `poisson`: `lambda`\n\nIf you are submitting a forecast that is not in the supported list we recommend using the ensemble format and sampling from your distribution to generate a set of ensemble members that represents your distribution. \n\n#### Ensemble (or sample) forecast\n\nEnsemble (or sample) forecasts use the `family` value of `ensemble` and the `parameter` values are the ensemble index.  \n\nWhen forecasts using the ensemble family are scored, we assume that the ensemble is a set of equally likely realizations that are sampled from a distribution is comparable to that of the observations (i.e., no broad adjustments are required to make the ensemble more consistent with observations). This is referred to as a \"perfect ensemble\" in Br√∂cker and Smith (2007). Ensemble (or sample) forecasts are transformed to a probability distribution function (e.g., dressed) using the default methods in the `scoringRules` R package (empirical version of the quantile decomposition for the `crps` and kernel density estimation using a Gaussian kernel for the `logs`). Kernel density estimation uses the default bandwidth produced by the `bw.nrd` function in the R `stats` package.\n\n### Supported distributions\n\nThe following names and parameterization of the distribution are supported (family: parameters):\n\n-   `lognormal`: `mu`, `sigma`\n-   `normal`: `mu`,`sigma`\n-   `bernoulli`: `prob`\n-   `beta`: `shape1`, `shape2`\n-   `uniform`: `min`, `max`\n-   `gamma`: `shape`, `rate`\n-   `logistic`: `location`, `scale`\n-   `exponential`: `rate`\n-   `poisson`: `lambda`\n\n### Example forecasts\n\nHere is an example of a forecast that uses a normal distribution:\n\n```{r}\ndf <- readr::read_csv(\"https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231345_daily-2023-10-01-climatology.csv.gz\", show_col_types = FALSE)\ndplyr::glimpse(df)\n```\n\nFor an ensemble (or sample) forecast, the `family` column uses the word `ensemble` to designate that it is a ensemble forecast and the parameter column is the ensemble member number (`1`, `2`, `3` ...)\n\n```{r}\ndf <- readr::read_csv(\"https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/forecasts/raw/T20231001231348_daily-2023-10-01-persistenceRW.csv.gz\", show_col_types = FALSE)\ndplyr::glimpse(df)\n```\n\n## Submission process\n\nIndividual forecast files can be uploaded any time.\n\nTeams will submit their forecast csv files through an R function.\n\nThe function is available using the following code\n\n```{r eval = FALSE}\nremotes::install_github(\"eco4cast/neon4cast\")\n```\n\nThe submit function is\n\n```{r eval = FALSE}\nlibrary(neon4cast)\nneon4cast::submit(forecast_file = \"your_file.csv\")\n```\n\nIf you will be submitting multiple forecasts using the same model_id, use the following\n\n```{r eval = FALSE}\nneon4cast::submit(forecast_file = \"your_file.csv\",\n                         first_submission = FALSE)\n```\n\n## Post submission\n\n### Processing\n\nAfter submission, our servers will process uploaded files by converting to a parquet format on our public s3 storage. A `pub_datetime` column will be added that denotes when a forecast was submitted.\n\n### Evaluation\n\nAll forecasts are scored daily using new data until the full horizon of the forecast has been scored. Forecasts are scored using the `crps` and `logs` functions in the [`scoringRules`](https://cran.r-project.org/web/packages/scoringRules/index.html) R package. \n\n### Comparsion\n\nForecast performance can be compared to the performance of baseline models.  We are automatically submitting the following baseline models:\n\n- `climatology`: the normal distribution (mean and standard deviation) of that day-of-year in the historical observations\n- `persistenceRW`: a random walk model that assumes no change in the mean behavior.  The random walk is initialized using the most resent observation.\n\nOur [forecast performance](performance.qmd#performance) page includes evaluations of all submitted models.\n\n### Catalog\n\nInformation for accessing the forecasts and scores can be found on our [forecast catalog](catalog.qmd#sec-spatiotemporal-asset-catalog) page. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"number-sections":true,"output-file":"instructions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Archive","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.146","editor":{"markdown":{"wrap":"sentence"}},"theme":["cerulean","custom.scss"],"title-block-style":"default","title-block-banner":"img/banner.jpg","title-block-banner-color":"white","page-layout":"full","title":"How to forecast"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}